import re
import subprocess
import requests
import time

def remove_protocol(url):
    return re.sub(r'https?://(www\.)?', '', url)

def run_wafw00f(url):
    try:
        print("Verificando o Web Application Firewall...")
        command = f'wafw00f {url}'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        lines = result.stdout.split('\n')
        print("Resultado do WAF:")
        for line in lines:
            if "The site" in line:
                print(line)
            elif "Number of requests:" in line:
                print(line)
        print("\n" + "=" * 50 + "\n")
    except Exception as e:
        print("Erro ao verificar o WAF:", e)

def run_nmap(url):
    try:
        print("Realizando scan de porta...")
        host = remove_protocol(url)
        command = f'nmap -sS -sV -p- -O {host}'
        start_time = time.time()
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        end_time = time.time()
        if result.returncode != 0:
            command = f'nmap -sS -sV -p- -O -Pn {host}'
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print("Scan Concluído:")
        print(result.stdout)
        print(f"Tempo decorrido: {end_time - start_time:.2f} segundos")
        print("\n" + "=" * 50 + "\n")
    except Exception as e:
        print("Erro ao executar o scan:", e)

def check_trace_method(url):
    try:
        print("Análisando método TRACE...")
        response = requests.request('TRACE', url)
        if response.status_code == 200 and 'TRACE / HTTP/1.1' in response.text:
            print("Método TRACE está habilitado.")
        else:
            print("Método TRACE não está habilitado.")
        print("\n" + "=" * 50 + "\n")
    except Exception as e:
        print("Erro ao verificar o método TRACE:", e)

def check_security_headers(url):
    try:
        print("Verificando os cabeçalhos de segurança...")
        headers = requests.head(url).headers
        security_headers = ['Content-Security-Policy', 'X-Content-Type-Options', 'X-Frame-Options',
                            'Strict-Transport-Security', 'X-XSS-Protection', 'Referrer-Policy', 'Permissions-Policy']
        for header in security_headers:
            if header in headers:
                print(f"{header}: OK")
            else:
                print(f"{header}: \033[91mAUSENTE\033[0m")
        print("\n" + "=" * 50 + "\n")
    except Exception as e:
        print("Erro ao verificar os cabeçalhos de segurança:", e)

def run_dnsrecon(url):
    try:
        print("Analisando DNS...")
        domain = remove_protocol(url)
        command = f'dnsrecon -d {domain}'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print("Resultado do dnsrecon:")
        print(result.stdout)
        print("\n" + "=" * 50 + "\n")
    except Exception as e:
        print("Erro ao executar o dnsrecon:", e)

def run_testssl(url):
    try:
        print("Executando o teste SSL...")
        command = f'/opt/gits/testssl.sh/testssl.sh {url}'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print("Resultado do teste SSL:")
        if result.returncode == 0:
            print(result.stdout)
        else:
            print("Erro ao executar o teste SSL.")
        print("\n" + "=" * 50 + "\n")
    except Exception as e:
        print("Erro ao executar o teste SSL:", e)

def run_nikto(url):
    try:
        print("Analisando vulnerabilidades...")
        command = f'nikto -h {url}'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print("Resultado da Análise:")
        print(result.stdout)
        print("\n" + "=" * 50 + "\n")
    except Exception as e:
        print("Erro ao executar a Análise:", e)

def check_wordpress(url):
    try:
        print("Verificando se é um site WordPress...")
        response = requests.get(url)
        if 'wp-content' in response.text:
            print("Este parece ser um site WordPress.")
            print("Executando verificação...")
            command = f'wpscan --url {url} -e ap --plugins-detection mixed --api-token E1LNRNSaAQoaZTDJEWTme8wzt5mMgPqDvtLfXfValCA'
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            print("Resultado do WPScan:")
            if result.returncode == 0:
                print(result.stdout)
            else:
                print("Erro ao executar o WPScan.")
        else:
            print("Este não parece ser um site WordPress.")
        print("\n" + "=" * 50 + "\n")
    except Exception as e:
        print("Erro ao verificar se é um site WordPress:", e)

def run_dirb(url):
    try:
        print("Verificando diretórios abertos...")
        command = f'dirb {url} /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print("Resultado do Dirb:")
        for line in result.stdout.split('\n'):
            if line.startswith('==> DIRECTORY'):
                print(line)
            elif line.startswith('+ ') and '200 OK' in line:
                print(line)
        print("\n" + "=" * 50 + "\n")
    except Exception as e:
        print("Erro ao executar o Dirb:", e)

def main():
    url = input("Digite a URL: ").strip()
    try:
        run_wafw00f(url)
        run_nmap(url)
        check_trace_method(url)
        check_security_headers(url)
        run_dnsrecon(url)
        run_testssl(url)
        run_nikto(url)
        check_wordpress(url)
        run_dirb(url)
    except Exception as e:
        print("Erro:", e)

if __name__ == "__main__":
    main()
